#include<iostream>
#include<sstream>
#include<algorithm>
#include<numeric>
#include<fstream>
#include "fit.hpp"
#include "polyval.hpp"

using std::cin;
using std::cout;
using std::endl;
using std::getline;
using std::string;
using std::istringstream;
using std::accumulate;
using std::ifstream;

int main()
{
//	string str;
//	getline(cin,str);
//	istringstream sin(str);
	ifstream ifin;
	ifin.open("D:\\111.txt");

	double t;
	vector<double> data;
//	while(sin>>t)
	while(ifin>>t)
	{
		data.push_back(t);
	}
	int num=data.size();
	int head=num*0.6;
	int tail=num*0.8;
	vector<double> data_1;
	for(int i=0;i<head+1;i++)
	{
		data_1.push_back(data[i]);
	}

	double std_1=sstd(data_1.size(),data_1.begin(),data_1.end());

	std_1=std_1*data_1.size();
	vector<double> data_2,x_data_2;
	for(int i=head+1;i<num;i++)
	{
		data_2.push_back(data[i]);
		x_data_2.push_back(i);
	}
	czy::Fit fit;
	fit.polyfit(x_data_2,data_2,2,1);
	vector<double> p;
	fit.getFactor(p);
	vector<double> yy=polyval(p,x_data_2);
	vector<double> temp;
	for(vector<double>::iterator ite1=yy.begin(),ite2=data_2.begin();ite1<yy.end()&&ite2<data_2.end();ite1++,ite2++)
	{
		double t=(*ite1)-(*ite2);
		temp.push_back(t);
	}
	double std_2=sstd(temp.size(),temp.begin(),temp.end());
	std_2=std_2*data_2.size();

	cout<<std_2<<endl;

	double std_sum_init=std_1+std_2;

	cout<<std_sum_init<<endl;

	int fengjie=0;
	double std_sum_min=0;
	double means_new=0;
	vector<double> data_1_new;
	vector<double> data_2_new;
	vector<double> yy_new;
	vector<double> p_new;
	for(int i=head;i<tail;i++)
	{
		vector<double> data_1(data.begin(),data.begin()+i-1);
		double mean_1=mean(data_1.size(),data_1.begin(),data_1.end());
		double std_1=sstd(data_1.size(),data_1.begin(),data_1.end());
		std_1=std_1*data_1.size();

		vector<double> data_2(data.begin()+i,data.end());
		vector<double> x_data_2;
		for(int j=i+1;j<num+1;j++)
		{
			x_data_2.push_back(j);
		}
		fit.polyfit(x_data_2,data_2,2,1);
		vector<double> p;
		fit.getFactor(p);
		yy=polyval(p,x_data_2);
		vector<double> temp;
		for(vector<double>::iterator ite1=yy.begin(),ite2=data_2.begin();ite1<yy.end();ite1++,ite2++)
		{
			double t=(*ite1)-(*ite2);
			temp.push_back(t);
		}
		double std_2=sstd(temp.size(),temp.begin(),temp.end());
		std_2=std_2*data_2.size();
		double std_sum=std_1+std_2;

		if(std_sum<std_sum_init)
		{
			fengjie=i;
			std_sum_init=std_sum;
			std_sum_min=std_sum;
			data_1_new=data_1;
			means_new=mean_1;
			data_2_new=data_2;
			yy_new=yy;
			p_new=p;
		}
	}
	cout<<"std_sum_init: "<<std_sum_init<<endl;
	cout<<"fengjie: "<<fengjie<<endl;
	cout<<"std_sum_min: "<<std_sum_min<<endl;
	cout<<"means_new: "<<means_new<<endl;
	cout<<"p_new: ";
	for(vector<double>::iterator ite=p_new.begin();ite<p_new.end();ite++)
	{
		cout<<*ite<<" ";
	}
	return 0;
}
/*
double data[]={
912.3	910.3	909.3	909.3	909.3	909.3	909.3	909.3	909.3	909.4	909.8	910	910	910.4	910.3	910.3	910.3	910.6	909.8	909.7	909.6	909.9	910.5	910.4	910.4	910.3	910.4	910.6	910.5	910.6	910.4	910.4	910.2	910.2	910.2	910.4	910.5	910.5	910.5	910.4	910.4	910.4	910.2	910.2	910.1	910.1	910.1	910.3	910.1	910.2	910.4	910.4	910.1	910.1	909.8	909.7	909.6	909.6	909.7	910.1	910.5	911	911.3	910.9	910.9	910.7	910.4	910.3	910.7	910.7	910.4	910.6	910.6	910.6	910.2	909.9	909.9	909.9	909.9	910	910	910.2	910.4	910.5	910.5	910.5	910.3	910.5	910.5	910.3	910.3	910.1	910.1	910.1	910.1	910.4	910.3	910.2	910.1	910.2	909.8	909.9	909.9	909.9	910.1	910.1	910.2	910	910	910	910	910	909.6	909.6	909.6	909.6	909.4	909.4	909.4	909.3	909.4	909.7	909.7	909.6	909.5	909.5	909.3	909.3	909.3	909.1	909.3	909	909.3	909.2	909.1	909.4	909.2	909.6	909.6	909.6	909.6	909.5	909.6	909.6	909.6	909.4	909.4	909.4	909.4	909.5	909.5	909.7	909.7	909.6	909.6	909.6	909.6	909.6	909.4	909.4	909.4	909.4	909.6	909.8	909.8	909.9	909.8	909.7	909.8	909.8	909.6	909.7	909.4	909.3	909.3	909.3	909.5	909.5	909.4	909.4	909.9	909.6	909.7	909.6	909.6	909.8	909.5	909.5	909.5	909.5	909.7	909.6	909.6	909.6	909.6	909.6	909.4	909.4	909.4	909.4	909	909.3	909.2	909.1	909.1	909.2	909.2	909.4	909.6	909.6	909.6	909.7	909.7	909.8	909.8	909.6	909.6	909.5	909.5	909.6	909.6	909.6	909.5	909.2	909.2	909.2	909.6	909.5	909.5	909.6	909.7	909.7	909.6	909.4	909.6	909.6	909.6	909.4	909.4	909.4	909.4	909.9	909.8	909.6	909.8	909.8	909.7	910	910	910	910	910	909.9	909.5	909.4	909.4	909.5	909.5	909.6	909.6	909.6	909.6	909.7	909.8	909.6	909.6	909.5	909.5	909.5	909.5	909.8	910	909.7	909.6	909.8	910.2	909.9	909.9	909.6	910	909.9	910	910.9	910.8	910.8	911.2	911.8	912.1	912.3	912.6	912.6	912.6	912.6	912.9	912.9	913.2	913.2	913.6	913.6	914.1	914.1	914.4	914.6	915.3	915.5	915.6	916.3	916.9	917.1	917.8	918.4	919.9	921.1	921.7	921.3	921.4	922	922.1	922.6	923.1	923.3	924	924.8	925.4	926.2	926.5	927.1	928.4	928.5	928.5	929.3	929.5	929.7	930.4	930.4	931.2	931.4	931.9	932.2	932.5	932.5	932.9	933.4	933.4	933.9	933.9	934.2	934.5	933.8	933.8	934.6	935.6	935.8	936.4	936.6	937.1	938.2	938.7	939.2	939.4	938.1	937.2	938.1	939	939.7	940.4	940.6	940.6	941.3	941.1	941.1	941	940.7	939.6	938	938.5	939.2	939.8	939	938.6	938.6	938.3	939.4	939.2	939.2	938.9	938.2	936.4	935.6	937.2	938.3	937.6	936.1	936.6	938.7	942.4	943.8	943.8	943.8	943.8
824	832.4	832.4	832.4	832.4	832.4	832.4	832.4	832.4	832.4	826.7	826.3	826.3	826.2	826.3	826.4	826.6	826.6	826.6	827.1	827.1	827.4	827.4	827.8	827.9	828	828.2	828.3	828.6	828.6	828.6	828.7	828.7	828.6	828.2	828	828.3	828.1	828.3	828.5	828.6	828.9	829.1	829.2	829.1	829.1	829	828.9	829.2	829.1	829.1	829.1	829.1	829.1	829.1	828.8	828.9	828.9	828.9	828.8	828.8	828.8	828.9	829	829.1	829.3	829.4	829.4	829.4	829.4	829	828.7	828.9	828.9	828.8	828.5	828.5	828.3	828	828	828	828.1	828.3	828.4	828.6	828.9	829.3	829.5	829.2	829.1	828.9	828.3	828.5	828.7	828.8	829	828.9	828.9	828.9	828.7	828.6	828.4	828.7	828.7	828.7	828.7	828.6	828.6	828.6	828.6	828.4	828.4	828.4	828.3	828.1	828.1	828.2	828.1	828.6	828.6	828.9	828.9	829.1	828.8	828.6	828.6	828.6	828.4	828.6	828.6	828.7	828.7	828.7	828.6	828.6	828.3	828.4	828.4	828.4	828.4	828.4	828.2	828.2	828.1	828.2	828.2	828.1	828.2	828	828	827.7	827.8	827.9	828.2	828.3	828.5	828.2	828	828.1	828.1	828	828.1	828.1	828.1	828.4	828.4	828.2	828.2	828.2	828.2	828.2	828.2	828.2	828.3	828.3	828.3	828.5	828.5	828.5	828.3	828.3	828.2	827.9	827.8	827.8	827.8	827.8	827.7	827.7	827.7	827.7	827.8	827.8	827.8	827.8	827.8	827.8	827.8	827.7	827.4	827.4	827.4	827.4	827.3	827	827	827.4	827.4	827.4	827.6	827.6	827.6	827.6	827.6	827.6	827.3	827.3	827.3	827.3	827.3	827.3	827.4	827.5	827.5	827.5	827.5	827.5	827.6	827.6	827.4	827.1	826.8	826.8	826.8	826.9	826.9	827.1	827.2	827.5	827.6	827.6	827.4	827.6	827.7	827.7	827.8	827.8	827.8	828.1	827.8	827.9	827.9	827.9	827.9	828.3	828.1	828.1	827.9	827.6	827.7	827.7	827.7	828.1	828.1	828.1	828.3	828.4	828.5	828.5	828.5	828.5	828	828	828	827.9	828	828	828.6	828.6	828.8	828.8	828.8	828.8	829.1	829.1	828.9	828.9	828.7	828.7	828.8	828.6	829	829.1	829.2	829.8	829.8	830	830	830.7	830.8	830.6	830.6	830.6	831	831	831.2	831.4	832	832.5	832.5	833.4	833.4	833.4	833.6	833.9	834.2	834.5	834.5	834.9	835.7	835.7	836.2	837.3	837.9	838	838	838.7	838.7	839	839	839.7	840.2	840.6	840.8	841.6	841.8	842.2	842.3	842.8	843	843.2	843.4	843.7	843.8	844.7	845.6	846.2	846.3	846.6	847	847.4	847.8	848.2	848.4	848.4	848.6	848.9	848.9	848	849.7	850.1	850.6	851.3	852.1	852.2	852.9	853	854.1	854.4	854.7	854.3	853.2	852.6	852.2	855	855.3	855.4	854.9	855.2	854.7	854.4	854.3	854	852.8	852.4	851.1	851.2	854.1	855.1	854.7	855.1	854.8	856	856.6	861.3	862.7	862.7	862.7	862.7	862.7
811.1	811.1	811.1	840	840	840	840	840	840	840	832.2	830	829.8	829.5	829.4	829.5	829.6	829.8	830.6	830.7	831.3	831.5	831.4	831.2	831	831.1	831.3	831.3	831.3	831	831.2	831.3	831.4	831.6	831.8	831.7	831.7	831.7	831.7	831.5	831.2	830.9	830.6	830.6	830.7	831	831.4	831.5	831.5	831.8	831.6	831.5	831.3	831.1	831.1	830.9	830.8	830.8	831	831.1	831.1	831.1	831.2	831.4	831	831.2	830.9	830.9	830.9	830.9	830.7	830.7	830.8	830.8	830.8	830.8	831	831	831.2	831.3	831.3	831.3	831.1	830.7	830.5	830.4	830.4	830.5	830.5	830.4	830.5	831.1	831.1	831.1	831.1	831.1	831.1	831.1	831.1	831.6	830.9	830.8	830.8	830.8	830.8	830.6	830.4	830.6	830.6	830.6	831	831.6	831.1	831.1	831	831	831	831	830.6	830.6	830.4	830.1	830.2	830.3	830.3	830.6	830.4	830.6	830.6	830.8	830.8	830.6	830.3	830.5	830.4	830.1	830	830	830.1	830.2	830.1	830.5	831.4	831	830.9	830.9	830.9	830.9	830.4	829.9	829.6	829.8	829.9	829.9	830.3	830.4	830.4	830.6	830.5	830.5	830.2	829.9	829.8	829.6	829.7	830	830.4	830.4	830.4	830.3	829.9	829.9	830.2	830.2	830.1	830.3	830.4	830.5	830.6	830.7	830.7	830.1	830.1	830.1	830.1	830.2	830.2	830.5	830.6	830.9	830.8	830.8	830.8	830.8	830.5	830.2	830.2	830.1	830.3	830.3	830.7	830.8	830.8	830.8	830.8	830.7	830.7	830.5	830.4	830.3	830.3	830.3	830.3	830	830	830.2	830.2	830.2	830.4	830.6	830.6	830.8	830.8	830.9	830.9	830.9	830.9	830.3	830.1	830.4	830.2	830.2	830.2	830.2	830.6	830.8	830.9	830.9	831	831	831	830.4	830.1	830.1	830.1	830.3	830.6	830.9	830.8	830.8	831	831.1	831.2	831.2	830.9	830.9	830.6	830.5	830.4	830.6	830.9	830.9	831.2	831.3	831.3	831.6	831.7	831.7	831.3	831	831	831.2	831.2	831.5	831.5	832	832	832.1	832.1	832.4	832.5	832.8	832.6	832.8	832.8	832.8	833.2	833.5	833.9	834.5	834.5	835.1	835.1	835.1	835.3	835.8	835.8	836.1	836.3	836.3	836.3	836.3	836.9	837.3	837.5	837.8	838.6	838.9	839.3	839.6	840	840.5	840.9	841.1	841.4	841.5	841.6	841.9	842.8	844	844.5	845	845.7	846.1	846.2	846.7	847	847.5	847.5	847.8	848.4	849.2	849.5	849.9	850.5	851.4	851.8	852.2	852.3	852.4	852.7	852.7	852.8	852.8	852.8	853.1	853.5	854.4	855.4	855.6	855.9	856.8	856.6	856.3	856.8	854.7	855.3	857	858.4	859	858.8	859.2	859	859.3	859	859	859.4	859.4	857.6	856	857.8	859.1	859.2	859	859.2	858.4	858.4	858.7	857.9	856	853.7	854.2	855.4	857.1	858	857.8	858.3	857.9	857.5	857.7	858.1	858.2	859.6	860.5	862.5	866.7	866.7	866.7	866.7	866.7
};*/
